/*
BELOW IS A SCRIPT TO ANALYZE THE BUFFER POOL AND BREAK DOWN BY DATABASE THE AMOUNT OF SPACE BEING TAKEN UP IN THE BUFFER POOL AND HOW MUCH OF THAT SPACE IS EMPTY SPACE. 
FOR SYSTEMS WITH A 100S OF GB OF MEMORY IN USE, THIS QUERY MAY TAKE A WHILE TO RUN:
*/

SELECT
    (CASE WHEN ([DATABASE_ID] = 32767)
        THEN N'RESOURCE DATABASE'
        ELSE DB_NAME ([DATABASE_ID]) END) AS [DATABASENAME],
    COUNT (*) * 8 / 1024 AS [MBUSED],
    SUM (CAST ([FREE_SPACE_IN_BYTES] AS BIGINT)) / (1024 * 1024) AS [MBEMPTY]
FROM SYS.DM_OS_BUFFER_DESCRIPTORS
GROUP BY [DATABASE_ID];
GO

-- ===============================================================================================================================================

/*
BELOW IS A SCRIPT THAT WILL BREAK THINGS DOWN BY TABLE AND INDEX ACROSS ALL DATABASES THAT ARE USING SPACE IN THE BUFFER POOL.
Iâ€™M FILTERING OUT SYSTEM OBJECTS PLUS INDEXES WHERE THE AMOUNT OF SPACE USED IN THE BUFFER POOL IS LESS THAN 100MB.
YOU CAN USE THIS TO IDENTIFY TABLES AND INDEXES THAT NEED SOME WORK ON THEM TO ALLOW YOUR BUFFER POOL MEMORY TO BE USED MORE EFFECTIVELY BY SQL SERVER AND INCREASE YOUR WORKLOAD PERFORMANCE.

*/

EXEC SP_MSFOREACHDB
    N'IF EXISTS (SELECT 1 FROM (SELECT DISTINCT DB_NAME ([DATABASE_ID]) AS [NAME]
    FROM SYS.DM_OS_BUFFER_DESCRIPTORS) AS NAMES WHERE [NAME] = ''?'')
BEGIN
USE [?]
SELECT
    ''?'' AS [DATABASE],
    OBJECT_NAME (P.[OBJECT_ID]) AS [OBJECT],
    P.[INDEX_ID],
    I.[NAME] AS [INDEX],
    I.[TYPE_DESC] AS [TYPE],
    --AU.[TYPE_DESC] AS [AUTYPE],
    --DPCOUNT AS [DIRTYPAGECOUNT],
    --CPCOUNT AS [CLEANPAGECOUNT],
    --DPCOUNT * 8 / 1024 AS [DIRTYPAGEMB],
    --CPCOUNT * 8 / 1024 AS [CLEANPAGEMB],
    (DPCOUNT + CPCOUNT) * 8 / 1024 AS [TOTALMB],
    --DPFREESPACE / 1024 / 1024 AS [DIRTYPAGEFREESPACE],
    --CPFREESPACE / 1024 / 1024 AS [CLEANPAGEFREESPACE],
    ([DPFREESPACE] + [CPFREESPACE]) / 1024 / 1024 AS [FREESPACEMB],
    CAST (ROUND (100.0 * (([DPFREESPACE] + [CPFREESPACE]) / 1024) / (([DPCOUNT] + [CPCOUNT]) * 8), 1) AS DECIMAL (4, 1)) AS [FREESPACEPC]
FROM
    (SELECT
        ALLOCATION_UNIT_ID,
        SUM (CASE WHEN ([IS_MODIFIED] = 1)
            THEN 1 ELSE 0 END) AS [DPCOUNT],
        SUM (CASE WHEN ([IS_MODIFIED] = 1)
            THEN 0 ELSE 1 END) AS [CPCOUNT],
        SUM (CASE WHEN ([IS_MODIFIED] = 1)
            THEN CAST ([FREE_SPACE_IN_BYTES] AS BIGINT) ELSE 0 END) AS [DPFREESPACE],
        SUM (CASE WHEN ([IS_MODIFIED] = 1)
            THEN 0 ELSE CAST ([FREE_SPACE_IN_BYTES] AS BIGINT) END) AS [CPFREESPACE]
    FROM SYS.DM_OS_BUFFER_DESCRIPTORS
    WHERE [DATABASE_ID] = DB_ID (''?'')
    GROUP BY [ALLOCATION_UNIT_ID]) AS BUFFERS
INNER JOIN SYS.ALLOCATION_UNITS AS AU
    ON AU.[ALLOCATION_UNIT_ID] = BUFFERS.[ALLOCATION_UNIT_ID]
INNER JOIN SYS.PARTITIONS AS P
    ON AU.[CONTAINER_ID] = P.[PARTITION_ID]
INNER JOIN SYS.INDEXES AS I
    ON I.[INDEX_ID] = P.[INDEX_ID] AND P.[OBJECT_ID] = I.[OBJECT_ID]
WHERE P.[OBJECT_ID] > 100 AND ([DPCOUNT] + [CPCOUNT]) > 12800 -- TAKING UP MORE THAN 100MB
ORDER BY [FREESPACEPC] DESC;
END';